{"name": "testRun[caseData1]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "caseData = {'assertType': '相等', 'caseId': 371, 'caseTitle': '缓存策略cachepolicy', 'caseType': 'Shell', ...}\n\n    @pytest.mark.parametrize('caseData', basecode.getCaseDataList(\"Sheet1\"))  # 执行指定用例（从excel读取数据）\n    def testRun(caseData):\n        caseId = caseData['caseId']\n        caseTitle = caseData['caseTitle']\n        server = caseData['server']\n        port = 22\n        serverUser = caseData['serverUser']\n        serverPasswd = caseData['serverPasswd']\n        scriptFilePath = caseData['script']\n        expectRes = caseData['expectRes']\n    \n        \"\"\"\n        连接服务器执行用例：\n            1、连接服务器\n            2、在服务器指定目录(config.ini=>server_testscript_path)中建立以用例脚本所在目录的目录名命名的文件夹\n            3、上传用例脚本所在目录中所有文件到服务器刚刚建立的文件夹中\n            4、执行指定的用例脚本，接受返回结果\n            5、删除上传的脚本及目录\n            6、比较返回结果与预期结果\n        \"\"\"\n    \n        # 1 连接服务器\n        sshutil = SSHUtil(server, port, serverUser, str(serverPasswd))\n        sshutil.connect()\n    \n        # 2 在服务器指定目录(config.ini=>server_testscript_path)中建立以用例脚本所在目录的目录名命名的文件夹\n        sshutil.exec(\"rm -rf \" + serverScriptPath)\n        time.sleep(5)\n        sshutil.exec(\"mkdir -p \" + serverScriptPath)\n    \n        # 3 上传用例脚本所在目录中所有文件到服务器刚刚建立的文件夹中\n        # TODO 集成从SVN中取脚本文件并上传\n        sshutil.upload(os.path.dirname(scriptFilePath), serverScriptPath)\n    \n        # 4 执行指定的用例脚本，接受返回结果\n        workdir = serverScriptPath + os.sep + os.path.split(os.path.dirname(scriptFilePath))[1] + os.sep\n        sshutil.exec(\"chmod 755 \" + workdir + \" *.sh\")\n        sshrtn = sshutil.exec('sh ' + workdir + os.path.split(scriptFilePath)[1])\n    \n        # 5\n        sshutil.exec(\"rm -rf \" + serverScriptPath)\n        time.sleep(5)\n    \n        rtn = sshrtn.read().decode('utf-8').strip()\n        # print(\"rtn: \" + rtn)\n        # print(\"exp: \" + expectRes)\n    \n        sshutil.close()\n>       assertUtil.assertEqual(caseId=caseId, caseName=caseTitle, res=rtn, expected=expectRes)\n\nxTest/TestRun.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommon/AssertUtil.py:150: in assertEqual\n    self.assertEqDict(expecteddata, resdata)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.AssertUtil.AssertUtil object at 0x10adb4400>\nexpected = {'olmBDBEntryCache': '1', 'olmBDBIDLCache': '1'}\nres = {'olmBDBEntryCache': '0', 'olmBDBIDLCache': '0'}\n\n    def assertEqDict(self, expected, res):\n        try:\n            # 因为operator模块可以对dict进行相等判断，无论dict中是字符串、dict、list，因此直接判断即可\n>           assert operator.eq(expected, res)\nE           AssertionError\n\ncommon/AssertUtil.py:55: AssertionError"}, "parameters": [{"name": "caseData", "value": "{'caseId': 371, 'caseTitle': '缓存策略cachepolicy', 'caseType': 'Shell', 'server': '172.16.196.135', 'serverUser': 'root', 'serverPasswd': 111111, 'container': '', 'script': '/Users/zhangbolun/Documents/PythonProjects/xTestPlatform/temporary/testscript/case370/test.sh', 'expectRes': '{\"olmBDBEntryCache\":\"1\",\"olmBDBIDLCache\":\"1\"}', 'assertType': '相等', 'errorOccur': '停止测试', 'errorOccurSkip': ''}"}], "start": 1649412155024, "stop": 1649412178167, "uuid": "6ffbfbef-74f5-4bdc-b40f-4d3b8ee7aaf6", "historyId": "f069fd49206b5c1e740780e362c97c9a", "testCaseId": "b728ad10feda8d17a246981e42360493", "fullName": "xTest.TestRun#testRun", "labels": [{"name": "parentSuite", "value": "xTest"}, {"name": "suite", "value": "TestRun"}, {"name": "host", "value": "zhangbolundeMacBook-Pro.local"}, {"name": "thread", "value": "45512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "xTest.TestRun"}]}